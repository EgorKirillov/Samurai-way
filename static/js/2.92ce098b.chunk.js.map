{"version":3,"file":"static/js/2.92ce098b.chunk.js","mappings":"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","sources":["hoc/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItms/DialogItems.tsx","components/Dialogs/Messages/Mesages.tsx","components/Dialogs/Messages/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","avatar|sync|/^/.*$"],"sourcesContent":["import React from 'react';\r\nimport {ComponentType} from \"react\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useAppSelector} from \"../Redux/hooks\";\r\n\r\n\r\nexport const withAuthRedirect = <T,>(Component: ComponentType<T>) => {\r\n  \r\n  return (props: T) => {\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n    if (!isAuth) return <Redirect to={\"/login\"}/>\r\n    return <Component {...props}/>\r\n  }\r\n  \r\n}","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__kSZmH\",\"dialogList\":\"Dialogs_dialogList__BJtct\",\"dialogListActive\":\"Dialogs_dialogListActive__vqn+o\",\"dialog\":\"Dialogs_dialog__IEoSN\",\"activeDialog\":\"Dialogs_activeDialog__kVFIf\",\"messageList\":\"Dialogs_messageList__Hv8b3\",\"message\":\"Dialogs_message__dbkiW\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\nimport {DialogItemTypes} from \"../../../Redux/dialogsReducer\";\r\n\r\n\r\nexport const DialogItem = (props: DialogItemTypes) => {\r\n\r\n    /*let link=\"../../../avatar/\"+props.avatarLink*/\r\n\r\n    return (\r\n        <div className={s.dialog/*+ ' ' + s.activeDialog*/ }>\r\n            <img\r\n                src={require(\"../../../avatar/\"+props.avatarLink)}\r\n                alt={'avatar' + props.avatarLink}\r\n            />\r\n            <NavLink to={\"/dialogs/\" + props.linkID} activeClassName={s.dialogListActive}> {props.userName} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageTypes} from \"../../../Redux/dialogsReducer\";\r\n\r\n\r\nexport const Message = (props: MessageTypes) => {\r\n    return (\r\n        <div className={s.message}>{props.messageText}</div>\r\n    )\r\n}\r\n","// import React from 'react';\r\n// import {SubmitHandler, useForm} from \"react-hook-form\";\r\n//\r\n// export type AddMessageFormDataType = {\r\n//     addMessageText: string\r\n// }\r\n//\r\n// export const AddMessageForm = (props:{onSubmit:(newMessage:string)=>void}) => {\r\n//     const {register,resetField, handleSubmit, watch, formState: {errors}} = useForm<AddMessageFormDataType>();\r\n//\r\n//     const onSubmit: SubmitHandler<AddMessageFormDataType> = (data) => {\r\n//         console.log(data);\r\n//         props.onSubmit(data.addMessageText)\r\n//         resetField(\"addMessageText\")\r\n//     }\r\n//\r\n//         return (\r\n//             <form onSubmit={handleSubmit(onSubmit)}>\r\n//                 <textarea key={\"dfsgdfg\"}\r\n//                        placeholder={\"enter your message\"}\r\n//                        id=\"123\" cols={15} rows={3}\r\n//                           {...register(\"addMessageText\",\r\n//                               {\r\n//                                   required: {value: true, message: 'this field is required'},\r\n//                                   maxLength: {value: 15, message: 'max length 255'}\r\n//                               })\r\n//                           }/>\r\n//                 {errors.addMessageText && <span>This field is required</span>}\r\n//                 <button>add message</button>\r\n//             </form>\r\n//         );\r\n//     };\r\nimport { Avatar, Button, Comment, Form, Input, List } from 'antd';\r\nimport moment from 'moment';\r\nimport React, { useState } from 'react';\r\nimport {useAppSelector} from \"../../../Redux/hooks\";\r\n\r\nconst { TextArea } = Input;\r\n\r\ninterface CommentItem {\r\n    author: string;\r\n    avatar: string;\r\n    content: React.ReactNode;\r\n    datetime: string;\r\n}\r\n\r\ninterface EditorProps {\r\n    onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n    onSubmit: () => void;\r\n    submitting: boolean;\r\n    value: string;\r\n}\r\n\r\nconst CommentList = ({ comments }: { comments: CommentItem[] }) => (\r\n  <List\r\n    dataSource={comments}\r\n    header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\r\n    itemLayout=\"horizontal\"\r\n    renderItem={props => <Comment {...props} />}\r\n  />\r\n);\r\n\r\nconst Editor = ({ onChange, onSubmit, submitting, value }: EditorProps) => (\r\n  <>\r\n      <Form.Item>\r\n          <TextArea rows={4} onChange={onChange} value={value} />\r\n      </Form.Item>\r\n      <Form.Item>\r\n          <Button htmlType=\"submit\" loading={submitting} onClick={onSubmit} type=\"primary\">\r\n              Add Comment\r\n          </Button>\r\n      </Form.Item>\r\n  </>\r\n);\r\n\r\n\r\n\r\nexport const AddMessageForm = ( props:{onSubmit:(newMessage:string)=>void} ) => {\r\n\r\n  const author = useAppSelector(state => state.auth.login)\r\n  const avatar = useAppSelector(state => state.auth.photo)\r\n    const [comments, setComments] = useState<CommentItem[]>([]);\r\n    const [submitting, setSubmitting] = useState(false);\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleSubmit = () => {\r\n        if (!value) return;\r\n\r\n        setSubmitting(true);\r\n\r\n        setTimeout(() => {\r\n            setSubmitting(false);\r\n            setValue('');\r\n            setComments([\r\n                ...comments,\r\n                {\r\n                    author: author,\r\n                    avatar: avatar,\r\n                    content: <p>{value}</p>,\r\n                    datetime: moment('2022-09-20').fromNow(),\r\n                },\r\n            ]);\r\n        }, 200);\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    return (\r\n      <>\r\n          {comments.length > 0 && <CommentList comments={comments} />}\r\n          <Comment\r\n            avatar={<Avatar src={avatar} alt={author} />}\r\n            content={\r\n                <Editor\r\n                  onChange={handleChange}\r\n                  onSubmit={handleSubmit}\r\n                  submitting={submitting}\r\n                  value={value}\r\n                />\r\n            }\r\n          />\r\n      </>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogsItms/DialogItems';\r\nimport {Message} from './Messages/Mesages';\r\nimport {AddMessageForm} from './Messages/AddMessageForm';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {addMessageActionCreator} from '../../Redux/dialogsReducer';\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/hooks\";\r\n\r\nexport const Dialogs = withAuthRedirect(() => {\r\n  \r\n  const dialogsData = useAppSelector(state => state.dialogsPage.dialogsData)\r\n  const messagesData = useAppSelector(state => state.dialogsPage.messagesData)\r\n  \r\n  const dispatch = useAppDispatch()\r\n  \r\n  const onSubmit = (newMessage: string) => {\r\n    dispatch(addMessageActionCreator(newMessage))\r\n  }\r\n\r\n    \r\n    let dialogElements = dialogsData.map(dialog =>\r\n        <DialogItem\r\n            linkID={dialog.linkID}\r\n            userName={dialog.userName}\r\n            avatarLink={dialog.avatarLink}/>)\r\n    \r\n    let messageElements = messagesData.map(message =>\r\n        <Message messageText={message.messageText}/>)\r\n    \r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.dialogList}>\r\n                {dialogElements}\r\n            </div>\r\n            <div>\r\n                <div className={s.messageList}>\r\n                    {messageElements}\r\n                </div>\r\n                <AddMessageForm onSubmit={onSubmit}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Dialogs\r\n\r\n","var map = {\n\t\"./icon01.png\": 5004,\n\t\"./icon02.png\": 584,\n\t\"./icon03.png\": 3415,\n\t\"./icon04.png\": 5551,\n\t\"./icon05.png\": 7202,\n\t\"./icon06.png\": 9973,\n\t\"./icon07.png\": 8694,\n\t\"./icon08.png\": 2675,\n\t\"./icon09.png\": 965,\n\t\"./icon10.png\": 7473\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5197;"],"names":["Component","DialogItem","props","className","s","src","require","avatarLink","alt","to","linkID","activeClassName","userName","Message","messageText","TextArea","Input","CommentList","comments","dataSource","header","length","itemLayout","renderItem","Editor","onChange","onSubmit","submitting","value","rows","htmlType","loading","onClick","type","AddMessageForm","author","useAppSelector","state","auth","login","avatar","photo","useState","setComments","setSubmitting","setValue","content","e","target","setTimeout","datetime","moment","fromNow","Dialogs","dialogsData","dialogsPage","messagesData","dispatch","useAppDispatch","dialogElements","map","dialog","messageElements","message","newMessage","addMessageActionCreator","isAuth","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"sourceRoot":""}